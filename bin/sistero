#!/usr/bin/env ruby

require 'bundler/setup'
require 'sistero'

module Sistero::Command
  @config = OpenStruct.new

  @subcommands = {}
  @op = nil

  def self.subcommand name, banner, &block
    @subcommands[name] = { name: name, banner: banner, parse_cmdline: block }
  end

  def self.with_help help_op
    help_op.on '-h', '--help', 'show this help message' do
      puts help_op
      exit
    end
  end

  def self.parse_opts op, args
    args = @config.args = args.clone
    op.order! args
    raise "must supply subcommand" if args.empty?

    action = args.first
    subcmd_meta = @subcommands[action]
    raise "invalid subcommand: #{action}" unless @subcommands.has_key? action
    args.shift

    @config.action = action
    OptionParser.new do |subop|
      subop.banner = subcmd_meta[:banner]
      with_help subop
      parse_cmdline = subcmd_meta[:parse_cmdline]
      parse_cmdline.call(subop) if parse_cmdline
    end.order! args
  end

  def self.run args
    OptionParser.new do |op|
      @op = op

      op.banner = 'usage: sistero [global options] command [command options]'
      op.on '-h', '--help', 'show this help message' do
        max_len = @subcommands.values.map { |subcommand| subcommand[:name].length }.max

        puts op
        puts "\ncommands:"
        @subcommands.values.each do |subcommand|
          prefix = subcommand[:name]
          prefix += ' ' * (max_len - prefix.length + 2)
          puts "    #{prefix}  #{subcommand[:banner]}"
        end
        exit
      end

      op.on '-c', '--config file', 'override path to config file' do |cfg_file_path|
        @config.cfg_file_path = cfg_file_path
      end

      subcommand 'ssh', 'ssh to vm' do |subop|
        subop.on '-o val', 'add ssh options' do |ssh_options|
          @config.ssh_options = ssh_options
        end
      end

      subcommand 'create', 'create vm'

      subcommand 'destroy', 'destroy vm'

      subcommand 'list', 'list vms'

      subcommand 'show-config', 'show configuration'

      subcommand 'ssh-keys', 'show ssh keys'

      subcommand 'sizes', 'show possible sizes'

      subcommand 'regions', 'show possible regions'

      subcommand 'images', 'show images'

      parse_opts op, args
    end

    unless @config.action
      puts 'please supply a command, see --help'
      exit
    end

    sistero = Sistero::Instance.new({ cfg_file_path: @config.cfg_file_path })
    case @config.action
    when 'ssh'
      vm_name, *ssh_args = @config.args
      # TODO: pass ssh_args
      sistero.ssh_to_vm(vm_name, ssh_options: @config.ssh_options)
    when 'create'
      vms = @config.args.empty? ? [nil] : @config.args
      vms.each { |vm_name| sistero.create_vm(vm_name) }
    when 'destroy'
      vms = @config.args.empty? ? [nil] : @config.args
      vms.each { |vm_name| sistero.destroy_vm(vm_name) }
    when 'list'
      sistero.list_vms()
    when 'show-config'
      sistero.show_config()
    when 'ssh-keys'
      sistero.show_ssh_keys()
    when 'sizes'
      sistero.show_sizes()
    when 'regions'
      sistero.show_regions()
    when 'images'
      sistero.show_images()
    end
  rescue RuntimeError => e
    puts e.to_s
  end
end

Sistero::Command::run ARGV.clone if __FILE__ == $0
