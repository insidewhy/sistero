#!/usr/bin/env ruby

require 'bundler/setup'
require 'sistero'
require 'sistero/version'
require 'moister'

module Sistero::Command
  def self.run args
    config = nil
    command = nil

    Moister::SubcommandOptionParser.new do |op|
      op.banner = "sistero #{Sistero::VERSION}\nusage: sistero [global options] command [command options]"
      op.version = Sistero::VERSION

      op.for_all do |op|
        op.on_tail '-h', '--help', 'show this help message' do
          puts op
          exit
        end
      end

      op.on '-c', '--config file', 'override path to config file', 'cfg_file_path'
      op.on '-d', '--directory dir', 'set working dir', 'directory'

      op.subcommand 'ssh [vm] [*run]', 'ssh to vm' do |subop|
        subop.on '-o val', 'add ssh options', 'ssh_options'
      end

      op.subcommand 'create [*vms]', 'create vm'
      op.subcommand 'create-all', 'create all vms in config'
      op.subcommand 'destroy [*vms]', 'destroy vm'
      op.subcommand 'list', 'list vms'
      op.subcommand 'show-config', 'show configuration'
      op.subcommand 'ssh-keys', 'show ssh keys'
      op.subcommand 'sizes', 'show possible sizes'
      op.subcommand 'regions', 'show possible regions'
      op.subcommand 'images', 'show images'

      parsed_cfg = op.parse args
      command = parsed_cfg[:command]
      config = OpenStruct.new parsed_cfg[:config]
    end

    unless command
      puts 'please supply a command, see --help'
      exit
    end

    command_cfg = OpenStruct.new config[command]
    sistero = Sistero::Instance.new({
      cfg_file_path: config.cfg_file_path,
      directory: config.directory
    })

    case command
    when 'ssh'
      # TODO: pass ssh_args
      sistero.ssh_to_vm(command_cfg.vm, ssh_options: command_cfg.ssh_options, run: command_cfg.run)
    when 'create'
      vms = command_cfg.vms
      vms.push nil if vms.empty?
      vms.each &sistero.method(:create_vm)
    when 'create-all'
      sistero.create_all()
    when 'destroy'
      vms = command_cfg.vms
      vms.push nil if vms.empty?
      vms.each &sistero.method(:destroy_vm)
    when 'list'
      sistero.list_vms()
    when 'show-config'
      sistero.show_config()
    when 'ssh-keys'
      sistero.show_ssh_keys()
    when 'sizes'
      sistero.show_sizes()
    when 'regions'
      sistero.show_regions()
    when 'images'
      sistero.show_images()
    end
  rescue RuntimeError => e
    puts e.to_s
  end
end

Sistero::Command::run ARGV
