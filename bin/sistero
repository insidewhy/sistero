#!/usr/bin/env ruby

require 'bundler/setup'
require 'sistero'

module Sistero::Command
  @config = OpenStruct.new

  @subcommands = {}
  @op = nil

  def self.subcommand name, banner, &block
    @subcommands[name] = { name: name, banner: banner, parse_cmdline: block }
  end

  def self.with_help help_op
    help_op.on '-h', '--help', 'show this help message' do
      puts help_op
      exit
    end
  end

  def self.parse_opts op
    op.order!

    action = ARGV[0]
    subcmd_meta = @subcommands[action]
    raise "invalid subcommand #{action}" unless @subcommands.has_key? action
    ARGV.shift

    @config.action = action
    OptionParser.new do |subop|
      subop.banner = subcmd_meta[:banner]
      with_help subop
      parse_cmdline = subcmd_meta[:parse_cmdline]
      parse_cmdline.call(subop) if parse_cmdline
    end.order!
    @config.action_arg = ARGV[0]
  end

  def self.run
    OptionParser.new do |op|
      @op = op

      op.banner = 'usage: sistero [global options] command [command options]'
      op.on '-h', '--help', 'show this help message' do
        max_len = @subcommands.values.map { |subcommand| subcommand[:name].length }.max

        puts op
        puts "\ncommands:"
        @subcommands.values.each do |subcommand|
          prefix = subcommand[:name]
          prefix += ' ' * (max_len - prefix.length + 2)
          puts "    #{prefix}  #{subcommand[:banner]}"
        end
        exit
      end

      subcommand 'ssh', 'ssh to vm' do |subop|
        subop.on '-o val', 'add ssh options' do |ssh_options|
          @config.ssh_options = ssh_options
        end
      end

      subcommand 'create', 'create vm'

      subcommand 'destroy', 'destroy vm'

      subcommand 'list', 'list vms'

      subcommand 'show-config', 'show configuration'

      parse_opts op
    end

    unless @config.action
      puts 'please supply a command, see --help'
      exit
    end

    vm_name = @config.action_arg

    begin
      sistero = Sistero::Instance.new
      case @config.action
      when 'ssh'
        sistero.ssh_to_vm(vm_name, ssh_options: @config.ssh_options)
      when 'create'
        sistero.create_vm(vm_name)
      when 'destroy'
        sistero.destroy_vm(vm_name)
      when 'list'
        sistero.list_vms()
      when 'show-config'
        sistero.show_config()
      end
    rescue RuntimeError => e
      puts e.to_s
    end
  end
end

Sistero::Command::run
